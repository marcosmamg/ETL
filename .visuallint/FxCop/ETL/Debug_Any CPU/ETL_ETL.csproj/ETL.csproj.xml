<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\professional\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Namespaces>
  <Namespace Name="ETL">
   <Messages>
    <Message Id="ETL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'ETL' in namespace name 'ETL' by changing it to 'Etl'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Users\ooqiadev38\Documents\Visual Studio 2017\Projects\ETL\ETL\bin\Debug\ETL.exe">
   <Modules>
    <Module Name="etl.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'ETL.exe' with a strong name key.</Issue>
      </Message>
      <Message Id="ETL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="85" Level="Error">Correct the casing of 'ETL' in assembly name 'ETL.exe' by changing it to 'Etl'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'ETL.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="ETL">
       <Types>
        <Type Name="ApplicationEngine" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'ApplicationEngine' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Main(System.String[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ETL.Utilities.Log(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="AppEngine.cs" Line="25">Method 'ApplicationEngine.Main(string[])' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Error parameters: Please verify the parameters".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="AppEngine.cs" Line="56">Method 'ApplicationEngine.Main(string[])' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Process completed succesfully".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="AppEngine.cs" Line="44">Method 'ApplicationEngine.Main(string[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Generating CSV".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="AppEngine.cs" Line="35">Method 'ApplicationEngine.Main(string[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Reading SQL File(s) and getting Data".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="AppEngine.cs" Line="49">Method 'ApplicationEngine.Main(string[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Uploading to FTP".</Issue>
            </Message>
            <Message Id="succesfully" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="AppEngine.cs" Line="56">Correct the spelling of the unrecognized token 'succesfully' in the literal '"Process completed succesfully"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CsvGenerator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'CsvGenerator' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GenerateCSV(System.Data.DataTable,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="13">In method 'CsvGenerator.GenerateCSV(DataTable, bool)', object 'memoryStream' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'memoryStream' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="ETL.Utilities.Log(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="48">Method 'CsvGenerator.GenerateCSV(DataTable, bool)' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Generating CSV File:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="46">Modify 'CsvGenerator.GenerateCSV(DataTable, bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="CSV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="12">Correct the casing of 'CSV' in member name 'CsvGenerator.GenerateCSV(DataTable, bool)' by changing it to 'Csv'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="12">In member 'CsvGenerator.GenerateCSV(DataTable, bool)', correct the casing of 'CSV' in parameter name 'HasCSVHeader' by changing it to 'Csv'.</Issue>
            </Message>
            <Message Id="Datafrom" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="12">In member 'CsvGenerator.GenerateCSV(DataTable, bool)', correct the casing of 'Datafrom' in parameter name 'DatafromSQL' by changing it to 'datafrom'.</Issue>
            </Message>
            <Message Id="Has" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="12">In member 'CsvGenerator.GenerateCSV(DataTable, bool)', correct the casing of 'Has' in parameter name 'HasCSVHeader' by changing it to 'has'.</Issue>
            </Message>
            <Message Id="SQL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="12">In member 'CsvGenerator.GenerateCSV(DataTable, bool)', correct the casing of 'SQL' in parameter name 'DatafromSQL' by changing it to 'Sql'.</Issue>
            </Message>
            <Message Id="Datafrom" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="12">In method 'CsvGenerator.GenerateCSV(DataTable, bool)', correct the spelling of 'Datafrom' in parameter name 'DatafromSQL' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="CSVGenerator.cs" Line="26">In externally visible method 'CsvGenerator.GenerateCSV(DataTable, bool)', validate parameter 'DatafromSQL' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DBClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'DBClient' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#getQueryResultset(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="35">In method 'DBClient.getQueryResultset(string)', call System.IDisposable.Dispose on object 'adapter' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="29">In method 'DBClient.getQueryResultset(string)', call System.IDisposable.Dispose on object 'dataset' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="27">Correct the casing of 'get' in member name 'DBClient.getQueryResultset(string)' by changing it to 'Get'.</Issue>
            </Message>
            <Message Id="Resultset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="27">Correct the spelling of 'Resultset' in member name 'DBClient.getQueryResultset(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="35">The query string passed to 'OdbcDataAdapter.OdbcDataAdapter(string, OdbcConnection)' in 'DBClient.getQueryResultset(string)' could contain the following variables 'query'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="29">Be sure to set the DataSet Locale property wherever 'DBClient.getQueryResultset(string)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenConnection(System.Data.Odbc.OdbcConnection&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ETL.Utilities.Log(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="21">Method 'DBClient.OpenConnection(ref OdbcConnection)' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Opening Database Connection:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="DBClient.cs" Line="19">Modify 'DBClient.OpenConnection(ref OdbcConnection)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FTPClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="FTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'FTP' in type name 'FTPClient' by changing it to 'Ftp'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="15">Replace method 'FTPClient.FTPClient(string, string, string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="15">In member 'FTPClient.FTPClient(string, string, string, string)', correct the casing of 'URL' in parameter name '_URL' by changing it to 'url'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="15">In member 'FTPClient.FTPClient(string, string, string, string)', remove the underscores from parameter name '_URL'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="15">In member 'FTPClient.FTPClient(string, string, string, string)', remove the underscores from parameter name '_password'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="15">In member 'FTPClient.FTPClient(string, string, string, string)', remove the underscores from parameter name '_port'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="15">In member 'FTPClient.FTPClient(string, string, string, string)', remove the underscores from parameter name '_userName'.</Issue>
            </Message>
            <Message Id="2#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="15">Change the type of parameter '_URL' of method 'FTPClient.FTPClient(string, string, string, string)' from string to System.Uri, or provide an overload of 'FTPClient.FTPClient(string, string, string, string)', that allows '_URL' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckIfFolderExists(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="112">Modify 'FTPClient.CheckIfFolderExists(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateFolder(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ETL.Utilities.Log(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="87">Method 'FTPClient.CreateFolder(string)' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "FTP Client:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="95">Method 'FTPClient.CreateFolder(string)' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "FTP Client:".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PORT_CONSTANT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CONSTANT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CONSTANT' in member name 'FTPClient.PORT_CONSTANT' by changing it to 'Constant'.</Issue>
            </Message>
            <Message Id="PORT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PORT' in member name 'FTPClient.PORT_CONSTANT' by changing it to 'Port'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'FTPClient.PORT_CONSTANT'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UploadFile(System.IO.MemoryStream,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="24">Consider changing the type of parameter 'File' in 'FTPClient.UploadFile(MemoryStream, string, string)' from 'MemoryStream' to its base type 'Stream'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="ETL.Utilities.Log(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="56">Method 'FTPClient.UploadFile(MemoryStream, string, string)' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "FTP Client:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="61">Method 'FTPClient.UploadFile(MemoryStream, string, string)' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "FTP Client:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="50">Method 'FTPClient.UploadFile(MemoryStream, string, string)' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Upload File Complete, status:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="59">Modify 'FTPClient.UploadFile(MemoryStream, string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="File" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="24">In member 'FTPClient.UploadFile(MemoryStream, string, string)', correct the casing of 'File' in parameter name 'File' by changing it to 'file'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="24">In member 'FTPClient.UploadFile(MemoryStream, string, string)', correct the casing of 'File' in parameter name 'FileName' by changing it to 'file'.</Issue>
            </Message>
            <Message Id="Path" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="24">In member 'FTPClient.UploadFile(MemoryStream, string, string)', correct the casing of 'Path' in parameter name 'Path' by changing it to 'path'.</Issue>
            </Message>
            <Message TypeName="PassSystemUriObjectsInsteadOfStrings" Category="Microsoft.Usage" CheckId="CA2234" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="24">Modify 'FTPClient.UploadFile(MemoryStream, string, string)' to call 'WebRequest.Create(Uri)' instead of 'WebRequest.Create(string)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#URL" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="11">Correct the casing of 'URL' in member name 'FTPClient.URL' by changing it to 'Url'.</Issue>
            </Message>
            <Message TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="FTPClient.cs" Line="11">Change the type of property 'FTPClient.URL' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QueryBuilder" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'QueryBuilder' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#getData()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="ETL.Utilities.Log(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="QueryBuilder.cs" Line="27">Method 'QueryBuilder.getData()' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Query Builder, status:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="QueryBuilder.cs" Line="25">Modify 'QueryBuilder.getData()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getSQLQueries()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ETL.Utilities.Log(System.String,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="QueryBuilder.cs" Line="46">Method 'QueryBuilder.getSQLQueries()' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Query Builder, status: Queries returned no result".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="QueryBuilder.cs" Line="53">Method 'QueryBuilder.getSQLQueries()' passes a literal string as parameter 'message' of a call to 'Utilities.Log(string, string)'. Retrieve the following string(s) from a resource table instead: "Query Builder, status:".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="QueryBuilder.cs" Line="51">Modify 'QueryBuilder.getSQLQueries()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Utilities" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'Utilities' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Log(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.DateTime.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-11-16 21:43:02Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="Utilities.cs" Line="15">Because the behavior of 'DateTime.ToString()' could vary based on the current user's locale settings, replace this call in 'Utilities.Log(string, string)' with a call to 'DateTime.ToString(IFormatProvider)'. If the result of 'DateTime.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\ooqiadev38\documents\visual studio 2017\Projects\ETL\ETL" File="Utilities.cs" Line="23">Because the behavior of 'DateTime.ToString()' could vary based on the current user's locale settings, replace this call in 'Utilities.Log(string, string)' with a call to 'DateTime.ToString(IFormatProvider)'. If the result of 'DateTime.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Assembly">Correct the casing of '{0}' in assembly name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, remove the underscores from parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="PassSystemUriObjectsInsteadOfStrings" Category="Microsoft.Usage" CheckId="CA2234">
   <Name>Pass System.Uri objects instead of strings</Name>
   <Description>If there are two overloads one taking System.Uri and one taking System.String, library code should never call the string-based overload.</Description>
   <Resolution Name="Default">Modify {0} to call {1} instead of {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182360.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306">
   <Name>Set locale for data types</Name>
   <Description>In most cases, Locale should be explicitly set to CultureInfo.InvariantCulture on DataSet and DataTable instances. Upon creation of a DataSet or DataTable instance, the Locale is set to the current culture. In most cases, the Locale should be set to CultureInfo.InvariantCulture to guarantee proper sorting behavior in all cultures.</Description>
   <Resolution Name="Default">Be sure to set the {0} Locale property wherever {1} creates an instance of that type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182188.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054">
   <Name>URI parameters should not be strings</Name>
   <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</Description>
   <Resolution Name="Default">Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182174.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056">
   <Name>URI properties should not be strings</Name>
   <Description>If a property name contains "uri" or "url" or "urn" and it's typed as string, it should be changed to System.Uri.</Description>
   <Resolution Name="Default">Change the type of property {0} from string to System.Uri.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182175.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
